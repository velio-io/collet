{"messages": [{"role": "system", "content": "You generate Collet actions and tasks in EDN format without additional explanations."}, {"role": "user", "content": "Group pull requests dataset by user and count pull requests per month."}, {"role": "assistant", "content": "{:name   :group-pull-requests\n :type   :slicer\n :params {:sequence [:state :pull-requests]\n          :apply    [[:group {:by :user}]\n                     [:fold {:by      :month\n                             :columns {:user     :distinct\n                                       :pr-count :row-count}}]]}}"}]}
{"messages": [{"role": "system", "content": "You generate Collet actions and tasks in EDN format without additional explanations."}, {"role": "user", "content": "Query all completed orders from a PostgreSQL database."}, {"role": "assistant", "content": "{:name      :fetch-orders\n :type      :collet.actions.jdbc/query\n :selectors {db-url      [:config :db-url]\n             db-user     [:config :db-user]\n             db-password [:config :db-password]}\n :params    {:connection {:jdbc-url db-url\n                          :user     db-user\n                          :password db-password}\n             :query      {:select [:*]\n                          :from   :orders\n                          :where  [:status \"completed\"]}}}"}]}
{"messages": [{"role": "system", "content": "You generate Collet actions and tasks in EDN format without additional explanations."}, {"role": "user", "content": "Fetch stock prices from Yahoo Finance."}, {"role": "assistant", "content": "{:name      :fetch-stock-prices\n :type      :collet.actions.http/request\n :selectors {symbol [:config :stock-symbol]}\n :params    {:url    [\"https://query1.finance.yahoo.com/v7/finance/quote?symbols=%s\" symbol]\n             :method :get\n             :as     :json}}"}]}
{"messages": [{"role": "system", "content": "You generate Collet actions and tasks in EDN format without additional explanations."}, {"role": "user", "content": "Fetch recent tweets about a specific topic, gather recent posts by the authors of those tweets, and then generate a summary of the trends, news, and insights discussed in those tweets using OpenAI's language model. Finally, save the summary to a local JSON file"}, {"role": "assistant", "content": "{:name  :twitter-latest-topic-activity\n :deps  {:coordinates [[io.velio/collet-actions \"0.2.7\"]]\n         :requires    [[clojure.string :as string]]}\n\n :tasks [{:name    :topic-recent-tweets\n          :actions [{:name      :recent-tweets\n                     :type      :collet.actions.http/request\n                     :selectors {bearer-token [:config :twitter-token]\n                                 topic        [:config :topic]}\n                     :params    {:url          \"https://api.twitter.com/2/tweets/search/recent\"\n                                 :oauth-token  bearer-token\n                                 :query-params {:query topic :max_results 100}\n                                 :as           :json}\n                     :return    [:data [:$/cat {:author :author_id :text :text}]]}]}\n\n         {:name     :recent-posts-by-authors\n          :inputs   [:topic-recent-tweets]\n          :parallel {:items   [:inputs :topic-recent-tweets]\n                     :threads 5}\n          :actions  [{:name      :author-query\n                      :type      :clj/format\n                      :selectors {author [:$parallel/item :author]}\n                      :params    [\"from:%s\" author]}\n                     {:name      :author-tweets\n                      :type      :collet.actions.http/request\n                      :selectors {bearer-token [:config :twitter-token]\n                                  author-query [:state :author-query]}\n                      :params    {:url          \"https://api.twitter.com/2/tweets/search/recent\"\n                                  :oauth-token  bearer-token\n                                  :query-params {:query author-query :max_results 10}\n                                  :as           :json}\n                      :return    [:data [:$/cat :text]]}]}\n\n         {:name    :topic-summary\n          :inputs  [:recent-posts-by-authors]\n          :actions [{:name      :topic-context\n                     :type      :custom\n                     :selectors {tweets [:inputs :recent-posts-by-authors]}\n                     :params    [tweets]\n                     :fn        (fn [tweets]\n                                  (string/join \"\\n\" tweets))}\n                    {:name      :summary\n                     :type      :collet.actions.llm/openai\n                     :selectors {openai-api-key [:config :openai-api-key]\n                                 topic          [:config :topic]\n                                 topic-context  [:state :topic-context]}\n                     :params    {:api-key  openai-api-key\n                                 :model    \"gpt-4o\"\n                                 :vars     {:context topic-context\n                                            :topic   topic}\n                                 :question \"Given the following contextual information: {context}.\n                                            Summarize the trends and news and insights discussed in the tweets for the topic: {topic}.\n                                            What is the most interested news discussed?\"}}\n                    {:name      :report\n                     :type      :collet.actions.file/sink\n                     :selectors {summary [:state :summary]\n                                 topic   [:config :topic]}\n                     :params    {:input     {:topic topic :summary summary}\n                                 :format    :json\n                                 :file-name \"./tmp/topic-summary.json\"}}]}]}"}]}