{:name  :devs-productivity-pipeline
 ;; add extra dependencies
 :deps  {:coordinates [[io.velio/collet-actions "0.1.4"]]
         :imports     [java.time.LocalDate java.time.format.DateTimeFormatter]}
 ;; specify the list of tasks
 :tasks [;; get the list of repositories for the organization
         {:name     :repositories
          :actions  [{:name :paginate-or-request
                      :type :switch
                      :case [{:condition [:not-nil? [:state :next-page-link]]
                              ;; request the next page
                              :actions   [{:name      :repositories-request
                                           :type      :collet.actions.http/request
                                           :selectors {next-page [:state :next-page-link]
                                                       gh-token  [:config :gh-token]}
                                           :params    #include ["/data/gh-request.edn"
                                                                {:url next-page}]
                                           :return    [{:repos [:body]
                                                        :link  [:headers :link]}]}]}
                             {:condition :default
                              ;; do initial request
                              :actions   [{:name      :repositories-request
                                           :type      :collet.actions.http/request
                                           :selectors {gh-token [:config :gh-token]
                                                       org-name [:config :org-name]}
                                           :params    #include ["/data/gh-request.edn"
                                                                {:url          ["https://api.github.com/orgs/%s/repos" org-name]
                                                                 :query-params {:per_page 100}}]
                                           :return    [{:repos [:body]
                                                        :link  [:headers :link]}]}]}]}
                     ;; parse the next page link from previous request
                     {:name      :next-page-link
                      :type      :clj/re-find
                      :when      [:not-nil? [:state :repositories-request :link]]
                      :selectors {next-link [:state :repositories-request :link]}
                      :params    [#rgx "(?<=<)([\\S]*)(?=>; rel=\"next\")" next-link]
                      :return    [[:$/op :first]]}]
          :iterator {:data [:state :repositories-request :repos [:$/cat #include "/data/repo-keys.edn"]]
                     ;; proceed while there is a next page link
                     :next [:not-nil? [:state :next-page-link]]}}

         ;; get the list of pull requests for each repository
         {:name     :pull-requests
          :inputs   [:repositories]
          :actions  [{:name :paginate-or-request
                      :type :switch
                      :case [{:condition [:nil? [:state :repository-prs :link]]
                              ;; take the repo from list and make initial request for PRs
                              :actions   [{:name      :repository
                                           :type      :mapper
                                           :selectors {repos [:inputs :repositories]}
                                           :params    {:sequence repos}}
                                          {:name      :repository-prs
                                           :type      :collet.actions.http/request
                                           :selectors {gh-token [:config :gh-token]
                                                       org-name [:config :org-name]
                                                       repo     [:$mapper/item :name]}
                                           :params    #include ["/data/gh-request.edn"
                                                                {:url          ["https://api.github.com/repos/%s/%s/pulls" org-name repo]
                                                                 :query-params {:per_page 100 :state "closed"}}]
                                           :return    [{:prs  [:body]
                                                        :link [:headers :link]}]}]}
                             {:condition [:regex [:state :repository-prs :link] ".*rel=\"next\".*"]
                              ;; get the next page of PRs
                              :actions   [{:name      :next-page-link
                                           :type      :clj/re-find
                                           :selectors {next-link [:state :repository-prs :link]}
                                           :params    [#rgx "(?<=<)([\\S]*)(?=>; rel=\"next\")" next-link]
                                           :return    [[:$/op :first]]}
                                          {:name      :repository-prs
                                           :type      :collet.actions.http/request
                                           :selectors {next-page [:state :next-page-link]
                                                       gh-token  [:config :gh-token]}
                                           :params    #include ["/data/gh-request.edn"
                                                                {:url next-page}]
                                           :return    [{:prs  [:body]
                                                        :link [:headers :link]}]}]}
                             {:condition :default
                              ;; no more PRs for the particular repo, clear the state and proceed to the next repo
                              :actions   [{:name   :repository-prs
                                           :type   :clj/identity
                                           :params {:prs [] :link nil}}]}]}]
          :iterator {:data [:state :repository-prs :prs [:$/cat #include "/data/pr-keys.edn"]]
                     ;; proceed while there is a next page link or there are more repositories
                     :next [:or [:not-nil? [:state :repository-prs :link]]
                            [:true? [:$mapper/has-next-item]]]}}

         ;; generate productivity reports
         {:name    :productivity-reports
          :inputs  [:pull-requests]
          :actions [;; calculate the total number of PRs for each member across all repositories
                    {:name      :total-prs-by-member
                     :type      :slicer
                     :selectors {pulls [:inputs :pull-requests]}
                     :params    {:sequence pulls
                                 :apply    [[:fold {:by :user-id :keep-columns {:title :distinct}}]
                                            [:map {:with (fn [{:keys [title]}]
                                                           {:pulls-count (count title)})}]
                                            [:select {:columns [:user-id :pulls-count]}]]}}
                    {:name      :save-total-report
                     :type      :collet.actions.file/sink
                     :selectors {data [:state :total-prs-by-member]}
                     :params    {:input       data
                                 :format      :csv
                                 :csv-header? true
                                 :file-name   "/data/reports/total-prs-by-member.csv"}}

                    ;; calculate the number of PRs for each member per month
                    {:name      :monthly-prs-by-member
                     :type      :slicer
                     :selectors {pulls [:inputs :pull-requests]}
                     :params    {:sequence pulls
                                 :apply    [[:map {:with (fn [{:keys [^String closed_at]}]
                                                           (let [dt ^LocalDate (LocalDate/parse closed_at (DateTimeFormatter/ofPattern "yyyy-MM-dd'T'HH:mm:ss'Z'"))]
                                                             {:year-month (str (.getYear dt) "-" (.getMonthValue dt))}))}]
                                            [:fold {:by           [:user-id :year-month]
                                                    :keep-columns {:title :distinct}}]
                                            [:map {:with (fn [{:keys [title]}]
                                                           {:pulls-count (count title)})}]
                                            [:select {:columns [:user-id :pulls-count :year-month]}]]}}
                    {:name      :save-monthly-report
                     :type      :collet.actions.file/sink
                     :selectors {data [:state :monthly-prs-by-member]}
                     :params    {:input       data
                                 :format      :csv
                                 :csv-header? true
                                 :file-name   "/data/reports/monthly-prs-by-member.csv"}}]}]}